declare module "wix-dashboard-management.v2" {
    /** List of favorite dashboard pages. */
    interface DashboardFavoriteList {
        /**
         * Dashboard favorite list ID. Automatically generated by Wix.
         * @readonly
         */
        _id?: string | null;
        /**
         * Revision number. Increments automatically by 1 whenever the list is successfully updated. To prevent conflicting changes, pass the current revision number when updating the list.
         * @readonly
         */
        revision?: string | null;
        /**
         * Date and time the dashboard favorite list was created.
         * @readonly
         */
        _createdDate?: Date;
        /**
         * Date and time the dashboard favorite list was last updated.
         * @readonly
         */
        _updatedDate?: Date;
        /** List of favorite dashboard pages. */
        favorites?: Favorite[];
    }
    interface Favorite {
        /** Favorite ID. Automatically generated by Wix. */
        _id?: string | null;
        /** ID of the page added to the list. */
        pageId?: string;
        /** Relative URL appended to the page's URL for customizing the navigation. It can include path segments, a query string, or a fragment identifier. */
        relativeUrl?: string | null;
        /** Custom title displayed in the list of favorite pages. */
        title?: string | null;
    }
    interface CreateUserFavoriteListRequest {
        /** Dashboard favorite list to create. */
        favoriteList: DashboardFavoriteList;
    }
    interface CreateUserFavoriteListResponse {
        /** Created dashboard favorite list. */
        favoriteList?: DashboardFavoriteList;
    }
    interface GetUserFavoriteListRequest {
    }
    interface GetUserFavoriteListResponse {
        /** User's dashboard favorite list. */
        favoriteList?: DashboardFavoriteList;
    }
    interface UpdateUserFavoriteListRequest {
        /**
         * Dashboard favorite list to update. The `favorites` array in the request replaces the existing `favorites` array.
         *
         * To prevent conflicting changes, include the current revision number.
         */
        favoriteList: DashboardFavoriteList;
    }
    interface UpdateUserFavoriteListResponse {
        /** Updated dashboard favorite list. */
        favoriteList?: DashboardFavoriteList;
    }
    interface DeleteUserFavoriteListRequest {
        /** ID of the dashboard favorite list to delete. */
        favoriteListId: string;
    }
    interface DeleteUserFavoriteListResponse {
    }
    interface AddUserFavoriteRequest {
        /** Favorite page to add to the list. */
        favorite: Favorite;
    }
    interface AddUserFavoriteResponse {
        /** Updated dashboard favorite list. */
        favoriteList?: DashboardFavoriteList;
    }
    interface DeleteUserFavoriteRequest {
        /** ID of the favorite page to delete from the list. */
        favoriteId: string;
    }
    interface DeleteUserFavoriteResponse {
        /** Updated dashboard favorite list. */
        favoriteList?: DashboardFavoriteList;
    }
    interface DomainEvent extends DomainEventBodyOneOf {
        createdEvent?: EntityCreatedEvent;
        updatedEvent?: EntityUpdatedEvent;
        deletedEvent?: EntityDeletedEvent;
        actionEvent?: ActionEvent;
        /**
         * Unique event ID.
         * Allows clients to ignore duplicate webhooks.
         */
        _id?: string;
        /**
         * Assumes actions are also always typed to an entity_type
         * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
         */
        entityFqdn?: string;
        /**
         * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
         * This is although the created/updated/deleted notion is duplication of the oneof types
         * Example: created/updated/deleted/started/completed/email_opened
         */
        slug?: string;
        /** ID of the entity associated with the event. */
        entityId?: string;
        /** Event timestamp. */
        eventTime?: Date;
        /**
         * Whether the event was triggered as a result of a privacy regulation application
         * (for example, GDPR).
         */
        triggeredByAnonymizeRequest?: boolean | null;
        /** If present, indicates the action that triggered the event. */
        originatedFrom?: string | null;
        /**
         * A sequence number defining the order of updates to the underlying entity.
         * For example, given that some entity was updated at 16:00 and than again at 16:01,
         * it is guaranteed that the sequence number of the second update is strictly higher than the first.
         * As the consumer, you can use this value to ensure that you handle messages in the correct order.
         * To do so, you will need to persist this number on your end, and compare the sequence number from the
         * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
         */
        entityEventSequence?: string | null;
    }
    /** @oneof */
    interface DomainEventBodyOneOf {
        createdEvent?: EntityCreatedEvent;
        updatedEvent?: EntityUpdatedEvent;
        deletedEvent?: EntityDeletedEvent;
        actionEvent?: ActionEvent;
    }
    interface EntityCreatedEvent {
        entityAsJson?: string;
    }
    interface EntityUpdatedEvent {
        /**
         * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
         * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
         * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
         */
        currentEntityAsJson?: string;
    }
    interface EntityDeletedEvent {
        /** Entity that was deleted */
        deletedEntityAsJson?: string | null;
    }
    interface ActionEvent {
        bodyAsJson?: string;
    }
    interface MessageEnvelope {
        /** App instance ID. */
        instanceId?: string | null;
        /** Event type. */
        eventType?: string;
        /** The identification type and identity data. */
        identity?: IdentificationData;
        /** Stringify payload. */
        data?: string;
    }
    interface IdentificationData extends IdentificationDataIdOneOf {
        /** ID of a site visitor that has not logged in to the site. */
        anonymousVisitorId?: string;
        /** ID of a site visitor that has logged in to the site. */
        memberId?: string;
        /** ID of a Wix user (site owner, contributor, etc.). */
        wixUserId?: string;
        /** ID of an app. */
        appId?: string;
        /** @readonly */
        identityType?: WebhookIdentityType;
    }
    /** @oneof */
    interface IdentificationDataIdOneOf {
        /** ID of a site visitor that has not logged in to the site. */
        anonymousVisitorId?: string;
        /** ID of a site visitor that has logged in to the site. */
        memberId?: string;
        /** ID of a Wix user (site owner, contributor, etc.). */
        wixUserId?: string;
        /** ID of an app. */
        appId?: string;
    }
    enum WebhookIdentityType {
        UNKNOWN = "UNKNOWN",
        ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
        MEMBER = "MEMBER",
        WIX_USER = "WIX_USER",
        APP = "APP"
    }
    /**
     * Retrieves the user's dashboard favorite list.
     * @public
     * @documentationMaturity preview
     * @permissionScope Manage Dashboard
     * @permissionScopeId SCOPE.DC-OS.MANAGE_DASHBOARD
     * @applicableIdentity APP
     * @adminMethod
     */
    function getUserFavoriteList(): Promise<GetUserFavoriteListResponse>;
    /**
     * Creates a list of favorite dashboard pages for the current user. A user can only have one such list.
     *
     * > **Note:**
     * > When first calling this endpoint, you can create a list that contains one or more favorite dashboard pages. However, if a list already exists for that user, calling this endpoint generates an error.
     * @param favoriteList - Dashboard favorite list to create.
     * @public
     * @documentationMaturity preview
     * @requiredField favoriteList
     * @requiredField favoriteList.favorites
     * @permissionScope Manage Dashboard
     * @permissionScopeId SCOPE.DC-OS.MANAGE_DASHBOARD
     * @applicableIdentity APP
     * @adminMethod
     * @returns Created dashboard favorite list.
     */
    function createUserFavoriteList(favoriteList: DashboardFavoriteList): Promise<DashboardFavoriteList>;
    /**
     * Updates the current user's list of favorite dashboard pages.
     *
     * Make sure to include the current revision number when calling this endpoint.
     *
     * > **Note:**
     * > Updating the list replaces the favorite pages it contains with those passed to the endpoint.
     * @param _id - Dashboard favorite list ID. Automatically generated by Wix.
     * @public
     * @documentationMaturity preview
     * @requiredField _id
     * @requiredField favoriteList
     * @requiredField favoriteList.revision
     * @permissionScope Manage Dashboard
     * @permissionScopeId SCOPE.DC-OS.MANAGE_DASHBOARD
     * @applicableIdentity APP
     * @adminMethod
     * @returns Updated dashboard favorite list.
     */
    function updateUserFavoriteList(_id: string | null, favoriteList: UpdateUserFavoriteList, options?: UpdateUserFavoriteListOptions): Promise<DashboardFavoriteList>;
    interface UpdateUserFavoriteList {
        /**
         * Dashboard favorite list ID. Automatically generated by Wix.
         * @readonly
         */
        _id?: string | null;
        /**
         * Revision number. Increments automatically by 1 whenever the list is successfully updated. To prevent conflicting changes, pass the current revision number when updating the list.
         * @readonly
         */
        revision?: string | null;
        /**
         * Date and time the dashboard favorite list was created.
         * @readonly
         */
        _createdDate?: Date;
        /**
         * Date and time the dashboard favorite list was last updated.
         * @readonly
         */
        _updatedDate?: Date;
        /** List of favorite dashboard pages. */
        favorites?: Favorite[];
    }
    interface UpdateUserFavoriteListOptions {
    }
    /**
     * Deletes the user's list of favorite dashboard pages.
     * @param favoriteListId - ID of the dashboard favorite list to delete.
     * @public
     * @documentationMaturity preview
     * @requiredField favoriteListId
     * @permissionScope Manage Dashboard
     * @permissionScopeId SCOPE.DC-OS.MANAGE_DASHBOARD
     * @applicableIdentity APP
     * @adminMethod
     */
    function deleteUserFavoriteList(favoriteListId: string): Promise<void>;
    /**
     * Adds a page to the current user’s list of favorite dashboard pages. If the user does not have a list, the endpoint creates a new list and adds the favorite page to it.
     * @param favorite - Favorite page to add to the list.
     * @public
     * @documentationMaturity preview
     * @requiredField favorite
     * @permissionScope Manage Dashboard
     * @permissionScopeId SCOPE.DC-OS.MANAGE_DASHBOARD
     * @applicableIdentity APP
     * @adminMethod
     */
    function addUserFavorite(favorite: Favorite): Promise<AddUserFavoriteResponse>;
    /**
     * Deletes the specified favorite page from the current user's list of favorite dashboard pages. If no favorites remain in the list, it is deleted.
     * @param favoriteId - ID of the favorite page to delete from the list.
     * @public
     * @documentationMaturity preview
     * @requiredField favoriteId
     * @permissionScope Manage Dashboard
     * @permissionScopeId SCOPE.DC-OS.MANAGE_DASHBOARD
     * @applicableIdentity APP
     * @adminMethod
     */
    function deleteUserFavorite(favoriteId: string): Promise<DeleteUserFavoriteResponse>;
    type dashboardV1FavoriteListFavoriteList_universal_d_DashboardFavoriteList = DashboardFavoriteList;
    type dashboardV1FavoriteListFavoriteList_universal_d_Favorite = Favorite;
    type dashboardV1FavoriteListFavoriteList_universal_d_CreateUserFavoriteListRequest = CreateUserFavoriteListRequest;
    type dashboardV1FavoriteListFavoriteList_universal_d_CreateUserFavoriteListResponse = CreateUserFavoriteListResponse;
    type dashboardV1FavoriteListFavoriteList_universal_d_GetUserFavoriteListRequest = GetUserFavoriteListRequest;
    type dashboardV1FavoriteListFavoriteList_universal_d_GetUserFavoriteListResponse = GetUserFavoriteListResponse;
    type dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteListRequest = UpdateUserFavoriteListRequest;
    type dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteListResponse = UpdateUserFavoriteListResponse;
    type dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteListRequest = DeleteUserFavoriteListRequest;
    type dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteListResponse = DeleteUserFavoriteListResponse;
    type dashboardV1FavoriteListFavoriteList_universal_d_AddUserFavoriteRequest = AddUserFavoriteRequest;
    type dashboardV1FavoriteListFavoriteList_universal_d_AddUserFavoriteResponse = AddUserFavoriteResponse;
    type dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteRequest = DeleteUserFavoriteRequest;
    type dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteResponse = DeleteUserFavoriteResponse;
    type dashboardV1FavoriteListFavoriteList_universal_d_DomainEvent = DomainEvent;
    type dashboardV1FavoriteListFavoriteList_universal_d_DomainEventBodyOneOf = DomainEventBodyOneOf;
    type dashboardV1FavoriteListFavoriteList_universal_d_EntityCreatedEvent = EntityCreatedEvent;
    type dashboardV1FavoriteListFavoriteList_universal_d_EntityUpdatedEvent = EntityUpdatedEvent;
    type dashboardV1FavoriteListFavoriteList_universal_d_EntityDeletedEvent = EntityDeletedEvent;
    type dashboardV1FavoriteListFavoriteList_universal_d_ActionEvent = ActionEvent;
    type dashboardV1FavoriteListFavoriteList_universal_d_MessageEnvelope = MessageEnvelope;
    type dashboardV1FavoriteListFavoriteList_universal_d_IdentificationData = IdentificationData;
    type dashboardV1FavoriteListFavoriteList_universal_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
    type dashboardV1FavoriteListFavoriteList_universal_d_WebhookIdentityType = WebhookIdentityType;
    const dashboardV1FavoriteListFavoriteList_universal_d_WebhookIdentityType: typeof WebhookIdentityType;
    const dashboardV1FavoriteListFavoriteList_universal_d_getUserFavoriteList: typeof getUserFavoriteList;
    const dashboardV1FavoriteListFavoriteList_universal_d_createUserFavoriteList: typeof createUserFavoriteList;
    const dashboardV1FavoriteListFavoriteList_universal_d_updateUserFavoriteList: typeof updateUserFavoriteList;
    type dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteList = UpdateUserFavoriteList;
    type dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteListOptions = UpdateUserFavoriteListOptions;
    const dashboardV1FavoriteListFavoriteList_universal_d_deleteUserFavoriteList: typeof deleteUserFavoriteList;
    const dashboardV1FavoriteListFavoriteList_universal_d_addUserFavorite: typeof addUserFavorite;
    const dashboardV1FavoriteListFavoriteList_universal_d_deleteUserFavorite: typeof deleteUserFavorite;
    namespace dashboardV1FavoriteListFavoriteList_universal_d {
        export { dashboardV1FavoriteListFavoriteList_universal_d_DashboardFavoriteList as DashboardFavoriteList, dashboardV1FavoriteListFavoriteList_universal_d_Favorite as Favorite, dashboardV1FavoriteListFavoriteList_universal_d_CreateUserFavoriteListRequest as CreateUserFavoriteListRequest, dashboardV1FavoriteListFavoriteList_universal_d_CreateUserFavoriteListResponse as CreateUserFavoriteListResponse, dashboardV1FavoriteListFavoriteList_universal_d_GetUserFavoriteListRequest as GetUserFavoriteListRequest, dashboardV1FavoriteListFavoriteList_universal_d_GetUserFavoriteListResponse as GetUserFavoriteListResponse, dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteListRequest as UpdateUserFavoriteListRequest, dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteListResponse as UpdateUserFavoriteListResponse, dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteListRequest as DeleteUserFavoriteListRequest, dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteListResponse as DeleteUserFavoriteListResponse, dashboardV1FavoriteListFavoriteList_universal_d_AddUserFavoriteRequest as AddUserFavoriteRequest, dashboardV1FavoriteListFavoriteList_universal_d_AddUserFavoriteResponse as AddUserFavoriteResponse, dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteRequest as DeleteUserFavoriteRequest, dashboardV1FavoriteListFavoriteList_universal_d_DeleteUserFavoriteResponse as DeleteUserFavoriteResponse, dashboardV1FavoriteListFavoriteList_universal_d_DomainEvent as DomainEvent, dashboardV1FavoriteListFavoriteList_universal_d_DomainEventBodyOneOf as DomainEventBodyOneOf, dashboardV1FavoriteListFavoriteList_universal_d_EntityCreatedEvent as EntityCreatedEvent, dashboardV1FavoriteListFavoriteList_universal_d_EntityUpdatedEvent as EntityUpdatedEvent, dashboardV1FavoriteListFavoriteList_universal_d_EntityDeletedEvent as EntityDeletedEvent, dashboardV1FavoriteListFavoriteList_universal_d_ActionEvent as ActionEvent, dashboardV1FavoriteListFavoriteList_universal_d_MessageEnvelope as MessageEnvelope, dashboardV1FavoriteListFavoriteList_universal_d_IdentificationData as IdentificationData, dashboardV1FavoriteListFavoriteList_universal_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf, dashboardV1FavoriteListFavoriteList_universal_d_WebhookIdentityType as WebhookIdentityType, dashboardV1FavoriteListFavoriteList_universal_d_getUserFavoriteList as getUserFavoriteList, dashboardV1FavoriteListFavoriteList_universal_d_createUserFavoriteList as createUserFavoriteList, dashboardV1FavoriteListFavoriteList_universal_d_updateUserFavoriteList as updateUserFavoriteList, dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteList as UpdateUserFavoriteList, dashboardV1FavoriteListFavoriteList_universal_d_UpdateUserFavoriteListOptions as UpdateUserFavoriteListOptions, dashboardV1FavoriteListFavoriteList_universal_d_deleteUserFavoriteList as deleteUserFavoriteList, dashboardV1FavoriteListFavoriteList_universal_d_addUserFavorite as addUserFavorite, dashboardV1FavoriteListFavoriteList_universal_d_deleteUserFavorite as deleteUserFavorite, };
    }
    export { dashboardV1FavoriteListFavoriteList_universal_d as favoriteList };
}
