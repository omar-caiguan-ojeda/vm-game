declare module "wix-media-collections-backend" {
  interface MediaCollection {
      /**
       * Collection id
       * @readonly
       */
      _id?: string;
      /** Collection name */
      name?: string;
      description?: string | null;
      /**
       * total count of MediaCollection members
       * @readonly
       */
      membersCount?: number;
      /**
       * the member who created the MediaCollection
       * @readonly
       */
      creator?: CollectionMember;
      /**
       * when MediaCollection was created
       * @readonly
       */
      _createdDate?: Date | null;
      /** Items in the collection */
      items?: MediaCollectionItem[];
      /**
       * total count of items
       * @readonly
       */
      itemsCount?: number;
      /** Privacy settings */
      privacySettings?: PrivacySettings;
      /** If true, the collection is locked and should not be updated */
      locked?: boolean;
  }
  interface CollectionMember {
      /**
       * Member id
       * @readonly
       */
      memberId?: string;
      /** Member nickname */
      nickname?: string | null;
      /** Member slug */
      slug?: string | null;
      /** Member photo url */
      photoUrl?: string | null;
  }
  interface MediaCollectionItem extends MediaCollectionItemMetadataOneOf {
      /** Photo metadata */
      photoMetadata?: PhotoMetadata;
      /** Video metadata */
      videoMetadata?: VideoMetadata;
      /** Text metadata */
      textMetadata?: TextMetadata;
      /**
       * item id
       * @readonly
       */
      _id?: string | null;
      /** item url for photos or video */
      mediaUrl?: string | null;
      /** if not present in an update it mean the item will be added as currentTimestamp */
      sortOrder?: number | null;
      /** item's original filename */
      name?: string | null;
      /** item's title */
      title?: string | null;
      /** item's description */
      description?: string | null;
      /** a link from the item to something else */
      link?: Link;
      /** item type: text, photo or video */
      dataType?: DataType;
      /**
       * If true, the item is secure and should not be exposed to the public
       * @internal
       */
      secure?: boolean;
      /**
       * When the item was added to the collection
       * @readonly
       */
      addedDate?: Date | null;
      /**
       * When the item was last updated
       * @readonly
       */
      _updatedDate?: Date | null;
      /** The owner of the media */
      mediaOwner?: MediaOwner;
      /** Tags for media */
      tags?: string[];
      /** Token for media */
      token?: string | null;
      /** Gallery id */
      galleryId?: string;
  }
  /** @oneof */
  interface MediaCollectionItemMetadataOneOf {
      /** Photo metadata */
      photoMetadata?: PhotoMetadata;
      /** Video metadata */
      videoMetadata?: VideoMetadata;
      /** Text metadata */
      textMetadata?: TextMetadata;
  }
  interface Link {
      type?: Type;
      /** Link text */
      text?: string | null;
      /** Link url */
      url?: string | null;
      /** Link target */
      target?: string | null;
      /** Data on how to construct the link from wix editor inputs */
      wixLinkData?: WixLink;
  }
  enum Type {
      /** Undefined */
      Undefined = "Undefined",
      /** external link */
      External = "External",
      /** link to wix pages */
      Internal = "Internal"
  }
  /** The link object generated by panels in the editor and used by applications in Wix */
  interface WixLink extends WixLinkLinkOneOf {
      /** External link type */
      external?: ExternalLink;
      /** Page link type */
      page?: PageLink;
      /** Anchor link type */
      anchor?: AnchorLink;
      /** Dynamic page link type */
      dynamicPage?: DynamicPageLink;
      /** Document link type */
      document?: DocumentLink;
      /** Email link type */
      email?: EmailLink;
      /** Phone link type */
      phone?: PhoneLink;
      /** Address link type */
      address?: AddressLink;
      /** WhatsApp link type */
      whatsApp?: WhatsAppLink;
      /** TPA link type */
      tpaPage?: TpaPageLink;
  }
  /** @oneof */
  interface WixLinkLinkOneOf {
      /** External link type */
      external?: ExternalLink;
      /** Page link type */
      page?: PageLink;
      /** Anchor link type */
      anchor?: AnchorLink;
      /** Dynamic page link type */
      dynamicPage?: DynamicPageLink;
      /** Document link type */
      document?: DocumentLink;
      /** Email link type */
      email?: EmailLink;
      /** Phone link type */
      phone?: PhoneLink;
      /** Address link type */
      address?: AddressLink;
      /** WhatsApp link type */
      whatsApp?: WhatsAppLink;
      /** TPA link type */
      tpaPage?: TpaPageLink;
  }
  interface ExternalLink {
      /** The url of the page */
      url?: string;
      /** Where this link should open, supports _self and _blank or any name the user chooses. _self means same page, _blank means new page. */
      target?: string | null;
  }
  interface PageLink {
      /** The page id we want from the site */
      pageId?: string;
      /** Where this link should open, supports _self and _blank or any name the user chooses. _self means same page, _blank means new page. */
      target?: string | null;
      /** rel of link */
      rel?: LinkRel[];
  }
  /**
   * The 'rel' attribute of the link. The rel attribute defines the relationship between a linked resource and the current document.
   * Further reading (also about different possible rel types): https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel
   * Following are the accepted 'rel' types by Wix applications.
   */
  enum LinkRel {
      /** default (not implemented) */
      unknown_link_rel = "unknown_link_rel",
      /** Indicates that the current document's original author or publisher does not endorse the referenced document. */
      nofollow = "nofollow",
      /** Instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it. */
      noopener = "noopener",
      /** No Referer header will be included. Additionally, has the same effect as noopener. */
      noreferrer = "noreferrer",
      /** Indicates a link that resulted from advertisements or paid placements. */
      sponsored = "sponsored"
  }
  interface AnchorLink {
      /** The name of the anchor */
      anchorName?: string;
      /** The data id (from the JSON page) of the anchor that should be used */
      anchorDataId?: string;
      /** The page id we want from the site */
      pageId?: string;
      /** rel of link */
      rel?: LinkRel[];
  }
  interface DynamicPageLink {
      /** The router that handles this link */
      routerId?: string;
      /** The path data we'd like */
      innerRoute?: string;
      /** The data id (from the JSON page) of the anchor that should be used */
      anchorDataId?: string | null;
      /** rel of link */
      rel?: LinkRel[];
  }
  interface DocumentLink {
      /** The id of the document */
      docId?: string;
      /** The name of the document for download purposes */
      name?: string | null;
      /** If this document can be indexed by scrapers, default is false */
      indexable?: boolean;
  }
  interface EmailLink {
      /** The email we will be sending a message to */
      recipient?: string;
      /** The subject of the email */
      subject?: string | null;
      /** The body of the email */
      body?: string | null;
  }
  interface PhoneLink {
      /** The phone number we want to link to */
      phoneNumber?: string;
  }
  interface AddressLink {
      /** An address that we can link to */
      address?: string;
  }
  interface WhatsAppLink {
      /** The whatsApp phone number we want to connect with */
      phoneNumber?: string;
  }
  /** Link to a TPA page */
  interface TpaPageLink {
      /** Type of item (e.g. 'wix.stores.sub_pages.product') */
      itemTypeIdentifier?: string;
      /** Id of linked item */
      itemId?: string;
      /** Id of linked page */
      pageId?: string;
      /** Id of app being linked to (AppDefId) */
      appDefinitionId?: string;
      /** The relativepath of linked page */
      path?: string;
      /** rel of link */
      rel?: LinkRel[];
  }
  enum DataType {
      Undefined = "Undefined",
      Photo = "Photo",
      Video = "Video",
      Text = "Text"
  }
  interface PhotoMetadata {
      /** Photo width */
      width?: number | null;
      /** Photo height */
      height?: number | null;
      /** The focal point of the image */
      focalPoint?: Point;
      /** aka Exchangeable image file format */
      exif?: Record<string, any> | null;
      /** the image quality */
      quality?: number | null;
      /** photo sharpening */
      unsharpMasking?: UnsharpMasking;
      /** id in WixMedia */
      mediaId?: string | null;
  }
  interface Point {
      /** x coordinate */
      x?: number;
      /** y coordinate */
      y?: number;
  }
  interface UnsharpMasking {
      /** number controls the amount of contrast that is added at the edges. */
      amount?: number | null;
      /** number in pixels. The size of the edges to be enhanced */
      radius?: number | null;
      /** The minimal level of brightness change that will be sharpened */
      threshold?: number | null;
  }
  interface VideoMetadata {
      /** Video width */
      width?: number | null;
      /** Video height */
      height?: number | null;
      /** Video duration in milliseconds */
      duration?: string | null;
      /** Video source */
      source?: Source;
      /** Video posters */
      posters?: Thumbnail[];
      /** Video resolutions */
      resolutions?: Resolution[];
      /** External source's representation for this video's id */
      externalId?: string | null;
  }
  enum Source {
      /** Undefined */
      Undefined = "Undefined",
      /** Youtube */
      Youtube = "Youtube",
      /** Vimeo */
      Vimeo = "Vimeo",
      /** Custom */
      Custom = "Custom"
  }
  interface Thumbnail {
      /** Thumbnail url */
      url?: string | null;
      /** Thumbnail width */
      width?: number | null;
      /** Thumbnail height */
      height?: number | null;
      /** Is this the default thumbnail */
      default?: boolean | null;
      /** The focal point of the image */
      focalPoint?: Point;
  }
  interface Resolution {
      /** eg 720p, 1024p etc */
      videoMode?: string | null;
      /** Video width */
      width?: number | null;
      /** Video height */
      height?: number | null;
      /** Map representing the file format (eg mp4)  to the url. In case of an external source the format can be youtube, vimeo, etc. */
      urls?: Record<string, string>;
  }
  interface TextMetadata {
      /** text data */
      html?: string | null;
      /** css style info for container */
      style?: Record<string, any> | null;
      /** populated via progallery app only (ck editor format) */
      editorHtml?: string | null;
      /** the wix editor's font Id used to display the text data */
      editorFontId?: string | null;
  }
  enum MediaOwner {
      /** Undefined */
      Undefined = "Undefined",
      /** Wix */
      Wix = "Wix",
      /** DeviantArt */
      DeviantArt = "DeviantArt",
      /** Custom */
      Custom = "Custom"
  }
  enum PrivacySettings {
      /** Undefined */
      Undefined = "Undefined",
      /** Public */
      Public = "Public",
      /** Secret */
      Secret = "Secret"
  }
  interface PermanentSiteDeletedResponse {
      requestId?: string;
      uniqueServiceIdentifier?: string;
      status?: Status;
      /** @readonly */
      _createdDate?: Date | null;
  }
  enum Status {
      UNKNOWN = "UNKNOWN",
      HANDLED = "HANDLED",
      NOTHING_TO_HANDLE = "NOTHING_TO_HANDLE"
  }
  interface Empty {
  }
  interface DomainEvent extends DomainEventBodyOneOf {
      createdEvent?: EntityCreatedEvent;
      updatedEvent?: EntityUpdatedEvent;
      deletedEvent?: EntityDeletedEvent;
      actionEvent?: ActionEvent;
      /**
       * Unique event ID.
       * Allows clients to ignore duplicate webhooks.
       */
      _id?: string;
      /**
       * Assumes actions are also always typed to an entity_type
       * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
       */
      entityFqdn?: string;
      /**
       * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
       * This is although the created/updated/deleted notion is duplication of the oneof types
       * Example: created/updated/deleted/started/completed/email_opened
       */
      slug?: string;
      /** ID of the entity associated with the event. */
      entityId?: string;
      /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
      eventTime?: Date | null;
      /**
       * Whether the event was triggered as a result of a privacy regulation application
       * (for example, GDPR).
       */
      triggeredByAnonymizeRequest?: boolean | null;
      /** If present, indicates the action that triggered the event. */
      originatedFrom?: string | null;
      /**
       * A sequence number defining the order of updates to the underlying entity.
       * For example, given that some entity was updated at 16:00 and than again at 16:01,
       * it is guaranteed that the sequence number of the second update is strictly higher than the first.
       * As the consumer, you can use this value to ensure that you handle messages in the correct order.
       * To do so, you will need to persist this number on your end, and compare the sequence number from the
       * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
       */
      entityEventSequence?: string | null;
  }
  /** @oneof */
  interface DomainEventBodyOneOf {
      createdEvent?: EntityCreatedEvent;
      updatedEvent?: EntityUpdatedEvent;
      deletedEvent?: EntityDeletedEvent;
      actionEvent?: ActionEvent;
  }
  interface EntityCreatedEvent {
      entityAsJson?: string;
      /**
       * Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity
       * @internal
       */
      triggeredByUndelete?: boolean | null;
      /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
      restoreInfo?: RestoreInfo;
  }
  interface RestoreInfo {
      deletedDate?: Date | null;
  }
  interface EntityUpdatedEvent {
      /**
       * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
       * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
       * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
       */
      currentEntityAsJson?: string;
      /**
       * This field is currently part of the of the EntityUpdatedEvent msg, but scala/node libraries which implements the domain events standard
       * wont populate it / have any reference to it in the API.
       * The main reason for it is that fetching the old entity from the DB will have a performance hit on an update operation so unless truly needed,
       * the developer should send only the new (current) entity.
       * An additional reason is not wanting to send this additional entity over the wire (kafka) since in some cases it can be really big
       * Developers that must reflect the old entity will have to implement their own domain event sender mechanism which will follow the DomainEvent proto message.
       * @internal
       * @deprecated
       */
      previousEntityAsJson?: string | null;
      /**
       * WIP - This property will hold both names and values of the updated fields of the entity.
       * For more details please see [adr](https://docs.google.com/document/d/1PdqsOM20Ph2HAkmx8zvUnzzk3Sekp3BR9h34wSvsRnI/edit#heading=h.phlw87mh2imx) or [issue](https://github.com/wix-private/nile-tracker/issues/363)
       * @internal
       */
      modifiedFields?: Record<string, any>;
  }
  interface EntityDeletedEvent {
      /**
       * Indicates if the entity is sent to trash-bin. only available when trash-bin is enabled
       * @internal
       */
      movedToTrash?: boolean | null;
      /** Entity that was deleted */
      deletedEntityAsJson?: string | null;
  }
  interface ActionEvent {
      bodyAsJson?: string;
  }
  interface MessageEnvelope {
      /** App instance ID. */
      instanceId?: string | null;
      /** Event type. */
      eventType?: string;
      /** The identification type and identity data. */
      identity?: IdentificationData;
      /** Stringify payload. */
      data?: string;
  }
  interface IdentificationData extends IdentificationDataIdOneOf {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
      /** @readonly */
      identityType?: WebhookIdentityType;
  }
  /** @oneof */
  interface IdentificationDataIdOneOf {
      /** ID of a site visitor that has not logged in to the site. */
      anonymousVisitorId?: string;
      /** ID of a site visitor that has logged in to the site. */
      memberId?: string;
      /** ID of a Wix user (site owner, contributor, etc.). */
      wixUserId?: string;
      /** ID of an app. */
      appId?: string;
  }
  enum WebhookIdentityType {
      UNKNOWN = "UNKNOWN",
      ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
      MEMBER = "MEMBER",
      WIX_USER = "WIX_USER",
      APP = "APP"
  }
  interface CollectionEvent extends CollectionEventEventTypeOneOf {
      /** Collection created */
      collectionCreated?: CollectionCreated;
      /** Items added to collection */
      itemsAddedToCollection?: ItemsAddedToCollection;
      /** Items removed from collection */
      itemsRemovedFromCollection?: ItemsRemovedFromCollection;
      /** Member joined to collection */
      memberJoinedToCollection?: MemberJoinedToCollection;
      /** Member left collection */
      memberLeftCollection?: MemberLeftCollection;
  }
  /** @oneof */
  interface CollectionEventEventTypeOneOf {
      /** Collection created */
      collectionCreated?: CollectionCreated;
      /** Items added to collection */
      itemsAddedToCollection?: ItemsAddedToCollection;
      /** Items removed from collection */
      itemsRemovedFromCollection?: ItemsRemovedFromCollection;
      /** Member joined to collection */
      memberJoinedToCollection?: MemberJoinedToCollection;
      /** Member left collection */
      memberLeftCollection?: MemberLeftCollection;
  }
  interface CollectionItemId {
      /** Id of the gallery in ProGallery */
      galleryId?: string;
      /** Id of the item in ProGallery */
      itemId?: string;
  }
  interface CollectionCreated {
      /** Collection id */
      _id?: string;
      /** Collection name */
      name?: string;
      /** Collection description */
      description?: string | null;
      /** Id of the member who created the collection */
      creatorMemberId?: string;
      /** When the collection was created */
      _createdDate?: Date | null;
      /** Privacy settings */
      privacySettings?: PrivacySettings;
  }
  interface ItemsAddedToCollection {
      /** Id of the collection */
      collectionId?: string;
      /** Id of the member who added items */
      addedByMember?: string;
      /** Ids of the items that were added */
      collectionItemIds?: CollectionItemId[];
      /** When the items were added */
      addedDate?: Date | null;
  }
  interface ItemsRemovedFromCollection {
      /** Id of the collection */
      collectionId?: string;
      /** Id of the member who removed items */
      removedByMember?: string;
      /** Ids of the items that were removed */
      itemIds?: string[];
      /** When the items were removed */
      removedDate?: Date | null;
  }
  interface MemberJoinedToCollection {
      /** Id of the collection */
      collectionId?: string;
      /** Id of the member who joined */
      memberId?: string;
      /** When the member was joined */
      joinedDate?: Date | null;
  }
  interface MemberLeftCollection {
      /** Id of the collection */
      collectionId?: string;
      /** Id of the member who left */
      memberId?: string;
      /** When the member left */
      leftDate?: Date | null;
  }
  interface GetMediaCollectionRequest {
      /** Collection id */
      mediaCollectionId: string;
      /** number of items to skip in the current sort order, default is 0 */
      offset?: number | null;
      /** The amount of items per response, default is 50 */
      limit?: number | null;
  }
  interface GetMediaCollectionResponse {
      /** The collection */
      mediaCollection?: MediaCollection;
      /** The member's status in the collection */
      memberStatus?: MemberStatus;
  }
  enum MemberStatus {
      /** Undefined */
      UNDEFINED = "UNDEFINED",
      /** Not a member */
      NOT_MEMBER = "NOT_MEMBER",
      /** Member */
      MEMBER = "MEMBER",
      /** Admin */
      ADMIN = "ADMIN"
  }
  interface ListCollectionsForItemRequest {
      /** Gallery id */
      galleryId?: string;
      /** Item id */
      itemId: string;
  }
  interface ListCollectionsForItemResponse {
      /** The collections that the item belongs to */
      itemInCollections?: ItemInCollection[];
  }
  interface ItemInCollection {
      /** Collection id */
      mediaCollectionId?: string;
      /** Collection name */
      name?: string;
      /** Is the item in the collection */
      isItemInCollection?: boolean;
      /** Is the collection locked */
      isLocked?: boolean;
      /** Member's role in the collection */
      role?: MemberStatus;
      /** Total count of items in the collection */
      totalItemsCount?: number | null;
      /** The first item in the collection */
      firstItem?: MediaCollectionItem;
      /** The creator's nickname */
      creatorNickname?: string | null;
  }
  interface GetCollectionItemRequest {
      /** Collection id */
      mediaCollectionId: string;
      /** Item id */
      itemId: string;
  }
  interface GetCollectionItemResponse {
      /** The item */
      item?: MediaCollectionItem;
  }
  interface ListMediaCollectionsRequest {
      /** the amount of collections per response, default is 1000 */
      limit?: number | null;
      /** number of collections to skip in the current sort order, default is 0 */
      offset?: number | null;
      /**
       * If empty, no filter will be applied
       * Else, will return only collections that the member has those roles on them. Currently supporting: MEMBER, ADMIN.
       */
      filterByRoles?: FilterByRoles;
  }
  interface FilterByRoles {
      roles?: MemberStatus[];
  }
  interface ListMediaCollectionsResponse {
      /** The collections and the member's role in them */
      collectionsStatus?: CollectionAndStatus[];
      /**
       * total count of MediaCollection members
       * @readonly
       */
      totalCollectionsCount?: number | null;
  }
  interface CollectionAndStatus {
      /** The Media Collection */
      mediaCollection?: MediaCollection;
      /** The member's status in the collection */
      memberStatus?: MemberStatus;
  }
  interface CreateMediaCollectionRequest {
      /** Name of the collection */
      name: string;
      /** Description of the collection */
      description?: string | null;
      /** Privacy settings of the collection */
      privacySettings?: PrivacySettings;
      /** Items to add to the collection */
      items?: AddItem[];
  }
  interface AddItem {
      /** Gallery id */
      galleryId?: string;
      /** Item id */
      itemId?: string;
      /** Order index of the item */
      orderIndex?: number | null;
  }
  interface CreateMediaCollectionResponse {
      /** id of the collection that was created */
      mediaCollectionId?: string;
  }
  interface PartiallyUpdateMediaCollectionRequest {
      /** Collection to update */
      mediaCollection: MediaCollection;
      /**
       * fields to update
       * supported fields: name, description, privacy_settings
       * @internal
       */
      fieldMask: string[];
  }
  interface PartiallyUpdateMediaCollectionResponse {
  }
  interface UpdateCollectionLockRequest {
      /** Collection to lock */
      mediaCollectionId: string;
      /** Lock status */
      locked?: boolean;
  }
  interface UpdateCollectionLockResponse {
  }
  interface DeleteMediaCollectionRequest {
      /** the collection to delete */
      mediaCollectionId: string;
  }
  interface DeleteMediaCollectionResponse {
  }
  interface ListCollectionMembersRequest {
      /** the collection to get its members */
      mediaCollectionId: string;
      /** Filter the members by their role in the collection */
      filterBy?: FilterBy;
  }
  interface FilterBy {
      /** Member's status in the collection */
      memberStatus?: MemberStatus;
  }
  interface ListCollectionMembersResponse {
      /** The collection's members and their roles */
      membersRoles?: MemberAndStatus[];
  }
  interface MemberAndStatus {
      /** The member */
      member?: CollectionMember;
      /** The member's role in the collection */
      memberStatus?: MemberStatus;
  }
  interface AddItemsRequest {
      /** Collection to add items */
      mediaCollectionId: string;
      /** Items to add */
      items?: AddItem[];
  }
  interface AddItemsResponse {
  }
  interface RemoveItemsRequest {
      /** Collection to remove items from */
      mediaCollectionId: string;
      /** Items to remove */
      itemsIds?: string[];
  }
  interface RemoveItemsResponse {
  }
  interface UpdateItemsRequest {
      /** Collection to update items */
      mediaCollectionId: string;
      items?: UpdateItem[];
  }
  interface UpdateItem {
      /** Item to update */
      itemId?: string;
      /** New order index of the item */
      orderIndex?: number;
  }
  interface UpdateItemsResponse {
  }
  interface JoinToCollectionRequest {
      /** Collection to join */
      mediaCollectionId: string;
  }
  interface JoinToCollectionResponse {
  }
  interface RemoveMemberFromCollectionRequest {
      /** Collection the member will be removed from being a member */
      mediaCollectionId: string;
      /** Member id to remove from the collection */
      memberId: string;
  }
  interface RemoveMemberFromCollectionResponse {
  }
  interface LeaveCollectionRequest {
      /** Collection the member will be leaving */
      mediaCollectionId: string;
  }
  interface LeaveCollectionResponse {
  }
  interface ListCollectionItemsRequest {
      /** Collection to get its items */
      mediaCollectionId: string;
  }
  interface ListCollectionItemsResponse {
      /** The collection's items */
      collectionItems?: CollectionItem[];
  }
  interface CollectionItem {
      /** Gallery id */
      galleryId?: string;
      /** Item id */
      itemId?: string;
      /** Order index of the item */
      orderIndex?: number | null;
      /** Date the item was added to the collection */
      addedDate?: Date | null;
  }
  interface ListAllItemsBelongToCollectionRequest {
  }
  interface ListAllItemsBelongToCollectionResponse {
      /** List of the item ids that belong to one or more collection */
      itemIds?: string[];
  }
  /**
   * Get a specific collection by its id
   * @param mediaCollectionId - Collection id
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   * @returns The collection
   */
  function get(mediaCollectionId: string, options?: GetOptions): Promise<MediaCollection>;
  interface GetOptions {
      /** number of items to skip in the current sort order, default is 0 */
      offset?: number | null;
      /** The amount of items per response, default is 50 */
      limit?: number | null;
  }
  /**
   * List all collections that the member has a role in them
   * @param itemId - Item id
   * @public
   * @documentationMaturity preview
   * @requiredField itemId
   * @adminMethod
   */
  function listCollectionsForItem(itemId: string, options?: ListCollectionsForItemOptions): Promise<ListCollectionsForItemResponse>;
  interface ListCollectionsForItemOptions {
      /** Gallery id */
      galleryId?: string;
  }
  /**
   * Get a specific item from a collection
   * @public
   * @documentationMaturity preview
   * @requiredField identifiers
   * @requiredField identifiers.itemId
   * @requiredField identifiers.mediaCollectionId
   * @adminMethod
   */
  function getCollectionItem(identifiers: GetCollectionItemIdentifiers): Promise<GetCollectionItemResponse>;
  interface GetCollectionItemIdentifiers {
      /** Collection id */
      mediaCollectionId: string;
      /** Item id */
      itemId: string;
  }
  /**
   * List all collections that the item belongs to
   * @public
   * @documentationMaturity preview
   * @adminMethod
   */
  function list(options?: ListOptions): Promise<ListMediaCollectionsResponse>;
  interface ListOptions {
      /** the amount of collections per response, default is 1000 */
      limit?: number | null;
      /** number of collections to skip in the current sort order, default is 0 */
      offset?: number | null;
      /**
       * If empty, no filter will be applied
       * Else, will return only collections that the member has those roles on them. Currently supporting: MEMBER, ADMIN.
       */
      filterByRoles?: FilterByRoles;
  }
  /**
   * Create a new collection
   * @param name - Name of the collection
   * @public
   * @documentationMaturity preview
   * @requiredField name
   * @adminMethod
   */
  function create(name: string, options?: CreateOptions): Promise<CreateMediaCollectionResponse>;
  interface CreateOptions {
      /** Description of the collection */
      description?: string | null;
      /** Privacy settings of the collection */
      privacySettings?: PrivacySettings;
      /** Items to add to the collection */
      items?: AddItem[];
  }
  /**
   * Update a collection
   * @param _id - Collection id
   * @public
   * @documentationMaturity preview
   * @requiredField _id
   * @requiredField mediaCollection
   * @adminMethod
   */
  function partiallyUpdate(_id: string, mediaCollection: PartiallyUpdateMediaCollection, options?: PartiallyUpdateOptions): Promise<void>;
  interface PartiallyUpdateMediaCollection {
      /**
       * Collection id
       * @readonly
       */
      _id?: string;
      /** Collection name */
      name?: string;
      description?: string | null;
      /**
       * total count of MediaCollection members
       * @readonly
       */
      membersCount?: number;
      /**
       * the member who created the MediaCollection
       * @readonly
       */
      creator?: CollectionMember;
      /**
       * when MediaCollection was created
       * @readonly
       */
      _createdDate?: Date | null;
      /** Items in the collection */
      items?: MediaCollectionItem[];
      /**
       * total count of items
       * @readonly
       */
      itemsCount?: number;
      /** Privacy settings */
      privacySettings?: PrivacySettings;
      /** If true, the collection is locked and should not be updated */
      locked?: boolean;
  }
  interface PartiallyUpdateOptions {
      /**
       * fields to update
       * supported fields: name, description, privacy_settings
       * @internal
       */
      fieldMask: string[];
  }
  /** @param mediaCollectionId - Collection to lock
   * @internal
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @permissionId COLLECTION.MANAGE
   * @adminMethod
   */
  function updateLock(mediaCollectionId: string, options?: UpdateLockOptions): Promise<void>;
  interface UpdateLockOptions {
      /** Lock status */
      locked?: boolean;
  }
  /**
   * Delete a collection
   * @param mediaCollectionId - the collection to delete
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function _delete(mediaCollectionId: string): Promise<void>;
  /**
   * List all members of a collection
   * @param mediaCollectionId - the collection to get its members
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function listCollectionMembers(mediaCollectionId: string, options?: ListCollectionMembersOptions): Promise<ListCollectionMembersResponse>;
  interface ListCollectionMembersOptions {
      /** Filter the members by their role in the collection */
      filterBy?: FilterBy;
  }
  /**
   * Add items to a collection
   * @param mediaCollectionId - Collection to add items
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function addItems(mediaCollectionId: string, options?: AddItemsOptions): Promise<void>;
  interface AddItemsOptions {
      /** Items to add */
      items?: AddItem[];
  }
  /**
   * Remove items from a collection
   * @param mediaCollectionId - Collection to remove items from
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function removeItems(mediaCollectionId: string, options?: RemoveItemsOptions): Promise<void>;
  interface RemoveItemsOptions {
      /** Items to remove */
      itemsIds?: string[];
  }
  /**
   * Update items in a collection
   * @param mediaCollectionId - Collection to update items
   * @internal
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function updateItems(mediaCollectionId: string, options?: UpdateItemsOptions): Promise<void>;
  interface UpdateItemsOptions {
      items?: UpdateItem[];
  }
  /**
   * Join to a collection
   * @param mediaCollectionId - Collection to join
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function joinToCollection(mediaCollectionId: string): Promise<void>;
  /** @internal
   * @documentationMaturity preview
   * @requiredField identifiers
   * @requiredField identifiers.mediaCollectionId
   * @requiredField identifiers.memberId
   * @adminMethod
   */
  function removeMemberFromCollection(identifiers: RemoveMemberFromCollectionIdentifiers): Promise<void>;
  interface RemoveMemberFromCollectionIdentifiers {
      /** Collection the member will be removed from being a member */
      mediaCollectionId: string;
      /** Member id to remove from the collection */
      memberId: string;
  }
  /** @param mediaCollectionId - Collection the member will be leaving
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function leaveCollection(mediaCollectionId: string): Promise<void>;
  /** @param mediaCollectionId - Collection to get its items
   * @public
   * @documentationMaturity preview
   * @requiredField mediaCollectionId
   * @adminMethod
   */
  function listCollectionItems(mediaCollectionId: string): Promise<ListCollectionItemsResponse>;
  /**
   * Return list of the item ids that belong to one or more collection
   * @internal
   * @documentationMaturity preview
   * @adminMethod
   */
  function listAllItemsBelongToCollection(): Promise<ListAllItemsBelongToCollectionResponse>;
  
  type collectionsV1Collection_universal_d_MediaCollection = MediaCollection;
  type collectionsV1Collection_universal_d_CollectionMember = CollectionMember;
  type collectionsV1Collection_universal_d_MediaCollectionItem = MediaCollectionItem;
  type collectionsV1Collection_universal_d_MediaCollectionItemMetadataOneOf = MediaCollectionItemMetadataOneOf;
  type collectionsV1Collection_universal_d_Link = Link;
  type collectionsV1Collection_universal_d_Type = Type;
  const collectionsV1Collection_universal_d_Type: typeof Type;
  type collectionsV1Collection_universal_d_WixLink = WixLink;
  type collectionsV1Collection_universal_d_WixLinkLinkOneOf = WixLinkLinkOneOf;
  type collectionsV1Collection_universal_d_ExternalLink = ExternalLink;
  type collectionsV1Collection_universal_d_PageLink = PageLink;
  type collectionsV1Collection_universal_d_LinkRel = LinkRel;
  const collectionsV1Collection_universal_d_LinkRel: typeof LinkRel;
  type collectionsV1Collection_universal_d_AnchorLink = AnchorLink;
  type collectionsV1Collection_universal_d_DynamicPageLink = DynamicPageLink;
  type collectionsV1Collection_universal_d_DocumentLink = DocumentLink;
  type collectionsV1Collection_universal_d_EmailLink = EmailLink;
  type collectionsV1Collection_universal_d_PhoneLink = PhoneLink;
  type collectionsV1Collection_universal_d_AddressLink = AddressLink;
  type collectionsV1Collection_universal_d_WhatsAppLink = WhatsAppLink;
  type collectionsV1Collection_universal_d_TpaPageLink = TpaPageLink;
  type collectionsV1Collection_universal_d_DataType = DataType;
  const collectionsV1Collection_universal_d_DataType: typeof DataType;
  type collectionsV1Collection_universal_d_PhotoMetadata = PhotoMetadata;
  type collectionsV1Collection_universal_d_Point = Point;
  type collectionsV1Collection_universal_d_UnsharpMasking = UnsharpMasking;
  type collectionsV1Collection_universal_d_VideoMetadata = VideoMetadata;
  type collectionsV1Collection_universal_d_Source = Source;
  const collectionsV1Collection_universal_d_Source: typeof Source;
  type collectionsV1Collection_universal_d_Thumbnail = Thumbnail;
  type collectionsV1Collection_universal_d_Resolution = Resolution;
  type collectionsV1Collection_universal_d_TextMetadata = TextMetadata;
  type collectionsV1Collection_universal_d_MediaOwner = MediaOwner;
  const collectionsV1Collection_universal_d_MediaOwner: typeof MediaOwner;
  type collectionsV1Collection_universal_d_PrivacySettings = PrivacySettings;
  const collectionsV1Collection_universal_d_PrivacySettings: typeof PrivacySettings;
  type collectionsV1Collection_universal_d_PermanentSiteDeletedResponse = PermanentSiteDeletedResponse;
  type collectionsV1Collection_universal_d_Status = Status;
  const collectionsV1Collection_universal_d_Status: typeof Status;
  type collectionsV1Collection_universal_d_Empty = Empty;
  type collectionsV1Collection_universal_d_DomainEvent = DomainEvent;
  type collectionsV1Collection_universal_d_DomainEventBodyOneOf = DomainEventBodyOneOf;
  type collectionsV1Collection_universal_d_EntityCreatedEvent = EntityCreatedEvent;
  type collectionsV1Collection_universal_d_RestoreInfo = RestoreInfo;
  type collectionsV1Collection_universal_d_EntityUpdatedEvent = EntityUpdatedEvent;
  type collectionsV1Collection_universal_d_EntityDeletedEvent = EntityDeletedEvent;
  type collectionsV1Collection_universal_d_ActionEvent = ActionEvent;
  type collectionsV1Collection_universal_d_MessageEnvelope = MessageEnvelope;
  type collectionsV1Collection_universal_d_IdentificationData = IdentificationData;
  type collectionsV1Collection_universal_d_IdentificationDataIdOneOf = IdentificationDataIdOneOf;
  type collectionsV1Collection_universal_d_WebhookIdentityType = WebhookIdentityType;
  const collectionsV1Collection_universal_d_WebhookIdentityType: typeof WebhookIdentityType;
  type collectionsV1Collection_universal_d_CollectionEvent = CollectionEvent;
  type collectionsV1Collection_universal_d_CollectionEventEventTypeOneOf = CollectionEventEventTypeOneOf;
  type collectionsV1Collection_universal_d_CollectionItemId = CollectionItemId;
  type collectionsV1Collection_universal_d_CollectionCreated = CollectionCreated;
  type collectionsV1Collection_universal_d_ItemsAddedToCollection = ItemsAddedToCollection;
  type collectionsV1Collection_universal_d_ItemsRemovedFromCollection = ItemsRemovedFromCollection;
  type collectionsV1Collection_universal_d_MemberJoinedToCollection = MemberJoinedToCollection;
  type collectionsV1Collection_universal_d_MemberLeftCollection = MemberLeftCollection;
  type collectionsV1Collection_universal_d_GetMediaCollectionRequest = GetMediaCollectionRequest;
  type collectionsV1Collection_universal_d_GetMediaCollectionResponse = GetMediaCollectionResponse;
  type collectionsV1Collection_universal_d_MemberStatus = MemberStatus;
  const collectionsV1Collection_universal_d_MemberStatus: typeof MemberStatus;
  type collectionsV1Collection_universal_d_ListCollectionsForItemRequest = ListCollectionsForItemRequest;
  type collectionsV1Collection_universal_d_ListCollectionsForItemResponse = ListCollectionsForItemResponse;
  type collectionsV1Collection_universal_d_ItemInCollection = ItemInCollection;
  type collectionsV1Collection_universal_d_GetCollectionItemRequest = GetCollectionItemRequest;
  type collectionsV1Collection_universal_d_GetCollectionItemResponse = GetCollectionItemResponse;
  type collectionsV1Collection_universal_d_ListMediaCollectionsRequest = ListMediaCollectionsRequest;
  type collectionsV1Collection_universal_d_FilterByRoles = FilterByRoles;
  type collectionsV1Collection_universal_d_ListMediaCollectionsResponse = ListMediaCollectionsResponse;
  type collectionsV1Collection_universal_d_CollectionAndStatus = CollectionAndStatus;
  type collectionsV1Collection_universal_d_CreateMediaCollectionRequest = CreateMediaCollectionRequest;
  type collectionsV1Collection_universal_d_AddItem = AddItem;
  type collectionsV1Collection_universal_d_CreateMediaCollectionResponse = CreateMediaCollectionResponse;
  type collectionsV1Collection_universal_d_PartiallyUpdateMediaCollectionRequest = PartiallyUpdateMediaCollectionRequest;
  type collectionsV1Collection_universal_d_PartiallyUpdateMediaCollectionResponse = PartiallyUpdateMediaCollectionResponse;
  type collectionsV1Collection_universal_d_UpdateCollectionLockRequest = UpdateCollectionLockRequest;
  type collectionsV1Collection_universal_d_UpdateCollectionLockResponse = UpdateCollectionLockResponse;
  type collectionsV1Collection_universal_d_DeleteMediaCollectionRequest = DeleteMediaCollectionRequest;
  type collectionsV1Collection_universal_d_DeleteMediaCollectionResponse = DeleteMediaCollectionResponse;
  type collectionsV1Collection_universal_d_ListCollectionMembersRequest = ListCollectionMembersRequest;
  type collectionsV1Collection_universal_d_FilterBy = FilterBy;
  type collectionsV1Collection_universal_d_ListCollectionMembersResponse = ListCollectionMembersResponse;
  type collectionsV1Collection_universal_d_MemberAndStatus = MemberAndStatus;
  type collectionsV1Collection_universal_d_AddItemsRequest = AddItemsRequest;
  type collectionsV1Collection_universal_d_AddItemsResponse = AddItemsResponse;
  type collectionsV1Collection_universal_d_RemoveItemsRequest = RemoveItemsRequest;
  type collectionsV1Collection_universal_d_RemoveItemsResponse = RemoveItemsResponse;
  type collectionsV1Collection_universal_d_UpdateItemsRequest = UpdateItemsRequest;
  type collectionsV1Collection_universal_d_UpdateItem = UpdateItem;
  type collectionsV1Collection_universal_d_UpdateItemsResponse = UpdateItemsResponse;
  type collectionsV1Collection_universal_d_JoinToCollectionRequest = JoinToCollectionRequest;
  type collectionsV1Collection_universal_d_JoinToCollectionResponse = JoinToCollectionResponse;
  type collectionsV1Collection_universal_d_RemoveMemberFromCollectionRequest = RemoveMemberFromCollectionRequest;
  type collectionsV1Collection_universal_d_RemoveMemberFromCollectionResponse = RemoveMemberFromCollectionResponse;
  type collectionsV1Collection_universal_d_LeaveCollectionRequest = LeaveCollectionRequest;
  type collectionsV1Collection_universal_d_LeaveCollectionResponse = LeaveCollectionResponse;
  type collectionsV1Collection_universal_d_ListCollectionItemsRequest = ListCollectionItemsRequest;
  type collectionsV1Collection_universal_d_ListCollectionItemsResponse = ListCollectionItemsResponse;
  type collectionsV1Collection_universal_d_CollectionItem = CollectionItem;
  type collectionsV1Collection_universal_d_ListAllItemsBelongToCollectionRequest = ListAllItemsBelongToCollectionRequest;
  type collectionsV1Collection_universal_d_ListAllItemsBelongToCollectionResponse = ListAllItemsBelongToCollectionResponse;
  const collectionsV1Collection_universal_d_get: typeof get;
  type collectionsV1Collection_universal_d_GetOptions = GetOptions;
  const collectionsV1Collection_universal_d_listCollectionsForItem: typeof listCollectionsForItem;
  type collectionsV1Collection_universal_d_ListCollectionsForItemOptions = ListCollectionsForItemOptions;
  const collectionsV1Collection_universal_d_getCollectionItem: typeof getCollectionItem;
  type collectionsV1Collection_universal_d_GetCollectionItemIdentifiers = GetCollectionItemIdentifiers;
  const collectionsV1Collection_universal_d_list: typeof list;
  type collectionsV1Collection_universal_d_ListOptions = ListOptions;
  const collectionsV1Collection_universal_d_create: typeof create;
  type collectionsV1Collection_universal_d_CreateOptions = CreateOptions;
  const collectionsV1Collection_universal_d_partiallyUpdate: typeof partiallyUpdate;
  type collectionsV1Collection_universal_d_PartiallyUpdateMediaCollection = PartiallyUpdateMediaCollection;
  type collectionsV1Collection_universal_d_PartiallyUpdateOptions = PartiallyUpdateOptions;
  const collectionsV1Collection_universal_d_updateLock: typeof updateLock;
  type collectionsV1Collection_universal_d_UpdateLockOptions = UpdateLockOptions;
  const collectionsV1Collection_universal_d__delete: typeof _delete;
  const collectionsV1Collection_universal_d_listCollectionMembers: typeof listCollectionMembers;
  type collectionsV1Collection_universal_d_ListCollectionMembersOptions = ListCollectionMembersOptions;
  const collectionsV1Collection_universal_d_addItems: typeof addItems;
  type collectionsV1Collection_universal_d_AddItemsOptions = AddItemsOptions;
  const collectionsV1Collection_universal_d_removeItems: typeof removeItems;
  type collectionsV1Collection_universal_d_RemoveItemsOptions = RemoveItemsOptions;
  const collectionsV1Collection_universal_d_updateItems: typeof updateItems;
  type collectionsV1Collection_universal_d_UpdateItemsOptions = UpdateItemsOptions;
  const collectionsV1Collection_universal_d_joinToCollection: typeof joinToCollection;
  const collectionsV1Collection_universal_d_removeMemberFromCollection: typeof removeMemberFromCollection;
  type collectionsV1Collection_universal_d_RemoveMemberFromCollectionIdentifiers = RemoveMemberFromCollectionIdentifiers;
  const collectionsV1Collection_universal_d_leaveCollection: typeof leaveCollection;
  const collectionsV1Collection_universal_d_listCollectionItems: typeof listCollectionItems;
  const collectionsV1Collection_universal_d_listAllItemsBelongToCollection: typeof listAllItemsBelongToCollection;
  namespace collectionsV1Collection_universal_d {
    export {
      collectionsV1Collection_universal_d_MediaCollection as MediaCollection,
      collectionsV1Collection_universal_d_CollectionMember as CollectionMember,
      collectionsV1Collection_universal_d_MediaCollectionItem as MediaCollectionItem,
      collectionsV1Collection_universal_d_MediaCollectionItemMetadataOneOf as MediaCollectionItemMetadataOneOf,
      collectionsV1Collection_universal_d_Link as Link,
      collectionsV1Collection_universal_d_Type as Type,
      collectionsV1Collection_universal_d_WixLink as WixLink,
      collectionsV1Collection_universal_d_WixLinkLinkOneOf as WixLinkLinkOneOf,
      collectionsV1Collection_universal_d_ExternalLink as ExternalLink,
      collectionsV1Collection_universal_d_PageLink as PageLink,
      collectionsV1Collection_universal_d_LinkRel as LinkRel,
      collectionsV1Collection_universal_d_AnchorLink as AnchorLink,
      collectionsV1Collection_universal_d_DynamicPageLink as DynamicPageLink,
      collectionsV1Collection_universal_d_DocumentLink as DocumentLink,
      collectionsV1Collection_universal_d_EmailLink as EmailLink,
      collectionsV1Collection_universal_d_PhoneLink as PhoneLink,
      collectionsV1Collection_universal_d_AddressLink as AddressLink,
      collectionsV1Collection_universal_d_WhatsAppLink as WhatsAppLink,
      collectionsV1Collection_universal_d_TpaPageLink as TpaPageLink,
      collectionsV1Collection_universal_d_DataType as DataType,
      collectionsV1Collection_universal_d_PhotoMetadata as PhotoMetadata,
      collectionsV1Collection_universal_d_Point as Point,
      collectionsV1Collection_universal_d_UnsharpMasking as UnsharpMasking,
      collectionsV1Collection_universal_d_VideoMetadata as VideoMetadata,
      collectionsV1Collection_universal_d_Source as Source,
      collectionsV1Collection_universal_d_Thumbnail as Thumbnail,
      collectionsV1Collection_universal_d_Resolution as Resolution,
      collectionsV1Collection_universal_d_TextMetadata as TextMetadata,
      collectionsV1Collection_universal_d_MediaOwner as MediaOwner,
      collectionsV1Collection_universal_d_PrivacySettings as PrivacySettings,
      collectionsV1Collection_universal_d_PermanentSiteDeletedResponse as PermanentSiteDeletedResponse,
      collectionsV1Collection_universal_d_Status as Status,
      collectionsV1Collection_universal_d_Empty as Empty,
      collectionsV1Collection_universal_d_DomainEvent as DomainEvent,
      collectionsV1Collection_universal_d_DomainEventBodyOneOf as DomainEventBodyOneOf,
      collectionsV1Collection_universal_d_EntityCreatedEvent as EntityCreatedEvent,
      collectionsV1Collection_universal_d_RestoreInfo as RestoreInfo,
      collectionsV1Collection_universal_d_EntityUpdatedEvent as EntityUpdatedEvent,
      collectionsV1Collection_universal_d_EntityDeletedEvent as EntityDeletedEvent,
      collectionsV1Collection_universal_d_ActionEvent as ActionEvent,
      collectionsV1Collection_universal_d_MessageEnvelope as MessageEnvelope,
      collectionsV1Collection_universal_d_IdentificationData as IdentificationData,
      collectionsV1Collection_universal_d_IdentificationDataIdOneOf as IdentificationDataIdOneOf,
      collectionsV1Collection_universal_d_WebhookIdentityType as WebhookIdentityType,
      collectionsV1Collection_universal_d_CollectionEvent as CollectionEvent,
      collectionsV1Collection_universal_d_CollectionEventEventTypeOneOf as CollectionEventEventTypeOneOf,
      collectionsV1Collection_universal_d_CollectionItemId as CollectionItemId,
      collectionsV1Collection_universal_d_CollectionCreated as CollectionCreated,
      collectionsV1Collection_universal_d_ItemsAddedToCollection as ItemsAddedToCollection,
      collectionsV1Collection_universal_d_ItemsRemovedFromCollection as ItemsRemovedFromCollection,
      collectionsV1Collection_universal_d_MemberJoinedToCollection as MemberJoinedToCollection,
      collectionsV1Collection_universal_d_MemberLeftCollection as MemberLeftCollection,
      collectionsV1Collection_universal_d_GetMediaCollectionRequest as GetMediaCollectionRequest,
      collectionsV1Collection_universal_d_GetMediaCollectionResponse as GetMediaCollectionResponse,
      collectionsV1Collection_universal_d_MemberStatus as MemberStatus,
      collectionsV1Collection_universal_d_ListCollectionsForItemRequest as ListCollectionsForItemRequest,
      collectionsV1Collection_universal_d_ListCollectionsForItemResponse as ListCollectionsForItemResponse,
      collectionsV1Collection_universal_d_ItemInCollection as ItemInCollection,
      collectionsV1Collection_universal_d_GetCollectionItemRequest as GetCollectionItemRequest,
      collectionsV1Collection_universal_d_GetCollectionItemResponse as GetCollectionItemResponse,
      collectionsV1Collection_universal_d_ListMediaCollectionsRequest as ListMediaCollectionsRequest,
      collectionsV1Collection_universal_d_FilterByRoles as FilterByRoles,
      collectionsV1Collection_universal_d_ListMediaCollectionsResponse as ListMediaCollectionsResponse,
      collectionsV1Collection_universal_d_CollectionAndStatus as CollectionAndStatus,
      collectionsV1Collection_universal_d_CreateMediaCollectionRequest as CreateMediaCollectionRequest,
      collectionsV1Collection_universal_d_AddItem as AddItem,
      collectionsV1Collection_universal_d_CreateMediaCollectionResponse as CreateMediaCollectionResponse,
      collectionsV1Collection_universal_d_PartiallyUpdateMediaCollectionRequest as PartiallyUpdateMediaCollectionRequest,
      collectionsV1Collection_universal_d_PartiallyUpdateMediaCollectionResponse as PartiallyUpdateMediaCollectionResponse,
      collectionsV1Collection_universal_d_UpdateCollectionLockRequest as UpdateCollectionLockRequest,
      collectionsV1Collection_universal_d_UpdateCollectionLockResponse as UpdateCollectionLockResponse,
      collectionsV1Collection_universal_d_DeleteMediaCollectionRequest as DeleteMediaCollectionRequest,
      collectionsV1Collection_universal_d_DeleteMediaCollectionResponse as DeleteMediaCollectionResponse,
      collectionsV1Collection_universal_d_ListCollectionMembersRequest as ListCollectionMembersRequest,
      collectionsV1Collection_universal_d_FilterBy as FilterBy,
      collectionsV1Collection_universal_d_ListCollectionMembersResponse as ListCollectionMembersResponse,
      collectionsV1Collection_universal_d_MemberAndStatus as MemberAndStatus,
      collectionsV1Collection_universal_d_AddItemsRequest as AddItemsRequest,
      collectionsV1Collection_universal_d_AddItemsResponse as AddItemsResponse,
      collectionsV1Collection_universal_d_RemoveItemsRequest as RemoveItemsRequest,
      collectionsV1Collection_universal_d_RemoveItemsResponse as RemoveItemsResponse,
      collectionsV1Collection_universal_d_UpdateItemsRequest as UpdateItemsRequest,
      collectionsV1Collection_universal_d_UpdateItem as UpdateItem,
      collectionsV1Collection_universal_d_UpdateItemsResponse as UpdateItemsResponse,
      collectionsV1Collection_universal_d_JoinToCollectionRequest as JoinToCollectionRequest,
      collectionsV1Collection_universal_d_JoinToCollectionResponse as JoinToCollectionResponse,
      collectionsV1Collection_universal_d_RemoveMemberFromCollectionRequest as RemoveMemberFromCollectionRequest,
      collectionsV1Collection_universal_d_RemoveMemberFromCollectionResponse as RemoveMemberFromCollectionResponse,
      collectionsV1Collection_universal_d_LeaveCollectionRequest as LeaveCollectionRequest,
      collectionsV1Collection_universal_d_LeaveCollectionResponse as LeaveCollectionResponse,
      collectionsV1Collection_universal_d_ListCollectionItemsRequest as ListCollectionItemsRequest,
      collectionsV1Collection_universal_d_ListCollectionItemsResponse as ListCollectionItemsResponse,
      collectionsV1Collection_universal_d_CollectionItem as CollectionItem,
      collectionsV1Collection_universal_d_ListAllItemsBelongToCollectionRequest as ListAllItemsBelongToCollectionRequest,
      collectionsV1Collection_universal_d_ListAllItemsBelongToCollectionResponse as ListAllItemsBelongToCollectionResponse,
      collectionsV1Collection_universal_d_get as get,
      collectionsV1Collection_universal_d_GetOptions as GetOptions,
      collectionsV1Collection_universal_d_listCollectionsForItem as listCollectionsForItem,
      collectionsV1Collection_universal_d_ListCollectionsForItemOptions as ListCollectionsForItemOptions,
      collectionsV1Collection_universal_d_getCollectionItem as getCollectionItem,
      collectionsV1Collection_universal_d_GetCollectionItemIdentifiers as GetCollectionItemIdentifiers,
      collectionsV1Collection_universal_d_list as list,
      collectionsV1Collection_universal_d_ListOptions as ListOptions,
      collectionsV1Collection_universal_d_create as create,
      collectionsV1Collection_universal_d_CreateOptions as CreateOptions,
      collectionsV1Collection_universal_d_partiallyUpdate as partiallyUpdate,
      collectionsV1Collection_universal_d_PartiallyUpdateMediaCollection as PartiallyUpdateMediaCollection,
      collectionsV1Collection_universal_d_PartiallyUpdateOptions as PartiallyUpdateOptions,
      collectionsV1Collection_universal_d_updateLock as updateLock,
      collectionsV1Collection_universal_d_UpdateLockOptions as UpdateLockOptions,
      collectionsV1Collection_universal_d__delete as _delete,
      collectionsV1Collection_universal_d_listCollectionMembers as listCollectionMembers,
      collectionsV1Collection_universal_d_ListCollectionMembersOptions as ListCollectionMembersOptions,
      collectionsV1Collection_universal_d_addItems as addItems,
      collectionsV1Collection_universal_d_AddItemsOptions as AddItemsOptions,
      collectionsV1Collection_universal_d_removeItems as removeItems,
      collectionsV1Collection_universal_d_RemoveItemsOptions as RemoveItemsOptions,
      collectionsV1Collection_universal_d_updateItems as updateItems,
      collectionsV1Collection_universal_d_UpdateItemsOptions as UpdateItemsOptions,
      collectionsV1Collection_universal_d_joinToCollection as joinToCollection,
      collectionsV1Collection_universal_d_removeMemberFromCollection as removeMemberFromCollection,
      collectionsV1Collection_universal_d_RemoveMemberFromCollectionIdentifiers as RemoveMemberFromCollectionIdentifiers,
      collectionsV1Collection_universal_d_leaveCollection as leaveCollection,
      collectionsV1Collection_universal_d_listCollectionItems as listCollectionItems,
      collectionsV1Collection_universal_d_listAllItemsBelongToCollection as listAllItemsBelongToCollection,
    };
  }
  
  export { collectionsV1Collection_universal_d as mediaCollections };
}
